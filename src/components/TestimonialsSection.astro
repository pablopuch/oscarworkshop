---
const { title, testimonials } = Astro.props;
---

<section class="bs-container bs-mt-lg">
  <!-- Title -->
  {title && <h2 class="bs-h2 text-center md:text-left">{title}</h2>}

  <!-- Testimonials -->
  <div
    class="group bs-mt-md grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 place-content-center gap-4"
  >
    <!-- Script para expansión y contracción -->
    <script type="module" is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("[data-leer-toggle]").forEach((btn) => {
          btn.addEventListener("click", function () {
            const tid = this.getAttribute("data-leer-toggle");
            const p = document.querySelector(`[data-quote-id="${tid}"]`);
            if (p) {
              const full = p.getAttribute("data-full-text");
              const short = p.getAttribute("data-short-text");
              if (this.getAttribute("data-expanded") === "true") {
                p.innerHTML = short;
                this.textContent = "Leer más";
                this.setAttribute("data-expanded", "false");
              } else {
                p.innerHTML = full;
                this.textContent = "Leer menos";
                this.setAttribute("data-expanded", "true");
              }
            }
          });
        });
      });
    </script>
    {
      testimonials.map((item, idx) => {
        // Si el testimonio es largo, ocupa 2 columnas
        const isLong = item.quote.length > 200;
        const colSpan = isLong ? "lg:col-span-2" : "";
        const quoteId = `testi-${idx}`;
        const shortText = item.quote.slice(0, 200) + "...";
        return (
          <blockquote
            class:list={[
              "group-hover:opacity-75 hover:opacity-100 duration-300 p-3 md:p-5 flex flex-col gap-3 justify-between border rounded-md bg-bs-surface-2 border-bs-surface-3 transition-all grid-flow-dense",
              colSpan,
            ]}
          >
            {/* Text + Botón en línea */}
            <span class="inline-block text-sm lg:text-lg font-sans">
              <span
                data-quote-id={quoteId}
                data-full-text={item.quote}
                data-short-text={shortText}
                set:html={isLong ? shortText : item.quote}
                style="display: inline;"
              />
              {isLong && (
                <button
                  type="button"
                  data-leer-toggle={quoteId}
                  data-expanded="false"
                  class="ml-2 align-baseline underline font-sans text-sm lg:text-lg"
                  style="padding:0; background:none; border:none; cursor:pointer; color:#554a8e;"
                >
                  Leer más
                </button>
              )}
            </span>
            {/* Estrellas */}
            <div class="flex flex-row items-center gap-1 mt-2 mb-1">
              {Array.from({ length: 5 }).map((_, i) => (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="#FFD700"
                  width="18"
                  height="18"
                  class="inline-block"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.967a1 1 0 00.95.69h4.175c.969 0 1.371 1.24.588 1.81l-3.38 2.455a1 1 0 00-.364 1.118l1.287 3.966c.3.922-.755 1.688-1.54 1.118l-3.38-2.454a1 1 0 00-1.175 0l-3.38 2.454c-.784.57-1.838-.196-1.54-1.118l1.287-3.966a1 1 0 00-.364-1.118L2.05 9.394c-.783-.57-.38-1.81.588-1.81h4.175a1 1 0 00.95-.69l1.286-3.967z" />
                </svg>
              ))}
            </div>
            {/* Cite */}
            <cite class="not-italic text-bs-foreground-dark text-sm font-semibold">
              @{item.handle}
            </cite>
          </blockquote>
        );
      })
    }
  </div>
</section>
